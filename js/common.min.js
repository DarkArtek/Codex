!function(){let wsUrl=/[\?&]OVERLAY_WS=([^&]+)/.exec(location.href),ws=null,queue=[],rseqCounter=0,responsePromises={},subscribers={},sendMessage=null,eventsStarted=!1;if(wsUrl){function connectWs(){ws=new WebSocket(wsUrl[1]),ws.addEventListener("error",e=>{console.error(e)}),ws.addEventListener("open",()=>{console.log("Connected!");let q=queue;queue=null;for(let msg of q)sendMessage(msg)}),ws.addEventListener("message",msg=>{try{msg=JSON.parse(msg.data)}catch(e){return void console.error("Invalid message received: ",msg)}void 0!==msg.rseq&&responsePromises[msg.rseq]?(responsePromises[msg.rseq](msg),delete responsePromises[msg.rseq]):processEvent(msg)}),ws.addEventListener("close",()=>{queue=[],console.log("Trying to reconnect..."),setTimeout(()=>{connectWs()},300)})}sendMessage=obj=>{queue?queue.push(obj):ws.send(JSON.stringify(obj))},connectWs()}else{function waitForApi(){if(!window.OverlayPluginApi||!window.OverlayPluginApi.ready)return void setTimeout(waitForApi,300);let q=queue;queue=null,window.__OverlayCallback=processEvent;for(let[msg,resolve]of q)sendMessage(msg,resolve)}sendMessage=(obj,cb)=>{queue?queue.push([obj,cb]):OverlayPluginApi.callHandler(JSON.stringify(obj),cb)},waitForApi()}function processEvent(msg){if(subscribers[msg.type])for(let sub of subscribers[msg.type])sub(msg)}window.dispatchOverlayEvent=processEvent,window.addOverlayListener=(event,cb)=>{eventsStarted&&subscribers[event]&&console.warn(`A new listener for ${event} has been registered after event transmission has already begun.\nSome events might have been missed and no cached values will be transmitted.\nPlease register your listeners before calling startOverlayEvents().`),subscribers[event]||(subscribers[event]=[]),subscribers[event].push(cb)},window.removeOverlayListener=(event,cb)=>{if(subscribers[event]){let list=subscribers[event],pos=list.indexOf(cb);pos>-1&&list.splice(pos,1)}},window.callOverlayHandler=msg=>{let p;return ws?(msg.rseq=rseqCounter++,p=new Promise((resolve,reject)=>{responsePromises[msg.rseq]=resolve}),sendMessage(msg)):p=new Promise(resolve=>{sendMessage(msg,data=>{resolve(null==data?null:JSON.parse(data))})}),p},window.startOverlayEvents=()=>{eventsStarted=!1,sendMessage({call:"subscribe",events:Object.keys(subscribers)})}}();